#!/bin/bash

# Check for nomp environment variables.
: "${NOMP_BACKEND:="opencl"}"
: "${NOMP_DEVICE:=0}"
: "${NOMP_PLATFORM:=0}"
: "${NOMP_VERBOSE:=0}"
: "${NOMP_PORT:=5005}"
: "${NOMP_PROGRAM:="open"}"
: "${NOMP_TEST_GROUPS:="*"}"
: "${NOMP_ANNOTATIONS_SCRIPT:="sem"}"

# Terminal output colors.
red=$(tput setaf 1)
green=$(tput setaf 2)
cyan=$(tput setaf 6)
reset=$(tput sgr0)

# Check if NOMP_INSTALL_DIR is set, if not exit with an error.
if [ -z "${NOMP_INSTALL_DIR}" ]; then
    echo -e "${red}Environment variable NOMP_INSTALL_DIR is not set.${reset}"
    exit 1
fi
export NOMP_TEST_DIR="${NOMP_INSTALL_DIR}/tests"

# Handle errors in lnrun input arguments/commands.
function print_lnrun_error_and_exit() {
  echo "${red}Invalid argument: \"${1}\"${reset}\nSee ${cyan}lnrun --help " \
    "$2 ${reset} for accepted commands."
  exit 1
}

# Print help for the `lnrun help` command.
function print_help_main() {
  echo -e " NAME\n\t Helper script for running libnomp tests, docs, etc.\n\n" \
    "SYNOPSIS\n" \
    "\t lnrun <options> [arguments]\n" \
    "OPTIONS\n" \
    "\t${cyan}--help  [command]${reset}\tPrint usage of each command." \
    "Command is one of ${cyan}test, debug${reset} or ${cyan}docs${reset}\n" \
    "\t${cyan}--test  [options]${reset}\tRun all the tests.\n" \
    "\t${cyan}--debug [options]${reset}\tDebug a provided test case.\n" \
    "\t${cyan}--docs  [options]${reset}\tRead user documentation.\n\n"
}

function print_help_test() {
  echo -e " NAME\n\tRun libnomp tests.\n\n" \
    "SYNOPSIS\n" \
    "\tlnrun --test [backend=<backend_name>] [platform=<platform_id>]\n" \
    "\t\t[device=<device_id>] [verbose=<verbose_level>]\n" \
    "\t\t[group=<pattern>]\n\n" \
    "OPTIONS\n" \
    "\t${cyan}backend ${reset}\tBackend for the tests." \
    "(Default: ${NOMP_BACKEND}).\n" \
    "\t${cyan}platform${reset}\tPlatform for the tests." \
    "(Default: ${NOMP_PLATFORM}).\n" \
    "\t${cyan}device  ${reset}\tDevice for the tests." \
    "(Default: ${NOMP_DEVICE}).\n" \
    "\t${cyan}verbose ${reset}\tVerbosity for the tests." \
    "(Default: ${NOMP_VERBOSE}).\n" \
    "\t${cyan}group   ${reset}\tPattern to filter the tests to be run." \
    "(Default: ${NOMP_TEST_GROUPS}).\n" \
    "EXAMPLES\n" \
    "\tRunning all the tests:\n" \
    "\t\t$ ${cyan}lnrun --test${reset}\n\n" \
    "\tRunning tests with the pattern api-23* using CUDA backend:\n" \
    "\t\t$ ${cyan}lnrun --test group=api-23* backend=cuda${reset}"
}

function print_help_debug() {
  echo -e "NAME\n\tDebug a test with gdbserver.\n\n" \
    "SYNOPSIS\n" \
    "\tlnrun --debug TEST [backend=<backend_name>] [platform=<platform_id>]\n" \
    "\t\t[device=<device_id>] [verbose=<verbose_level>] [port=<port_number>]\n" \
    "OPTIONS\n" \
    "\t${cyan}TEST    ${reset}\tTest name to be run in the debugger.\n" \
    "\t${cyan}backend ${reset}\tBackend for the tests." \
    "(Default: ${NOMP_BACKEND}).\n" \
    "\t${cyan}platform${reset}\tPlatform for the tests." \
    "(Default: ${NOMP_PLATFORM}).\n" \
    "\t${cyan}device  ${reset}\tDevice for the tests." \
    "(Default: ${NOMP_DEVICE}).\n" \
    "\t${cyan}verbose ${reset}\tVerbosity for the tests." \
    "(Default: ${NOMP_VERBOSE}).\n" \
    "\t${cyan}port    ${reset}\tgdbserver port number." \
    "(Default: ${NOMP_PORT}).\n" \
    "EXAMPLES\n" \
    "\tDebugging the test api-240 on port 5005:\n" \
    "\t\t$ ${cyan}lnrun --debug api-240 port=5005${reset}\n\n" \
    "\tDebugging the test api-110 using CUDA backend:\n" \
    "\t\t$ ${cyan}lnrun --debug api-110 backend=cuda${reset}"
}

function print_help_docs() {
  echo -e "NAME\n\tOpen libnomp HTML user documentation.\n\n" \
    "SYNOPSIS\n" \
    "\tlnrun --docs [program=<path_to_program>]\n\n" \
    "OPTIONS\n" \
    "\t${cyan}program${reset}\tProgram to open HTML files. " \
    "(Default: ${NOMP_PROGRAM}).\n\n" \
    "EXAMPLES\n" \
    "\tOpen user documentation on google chrome:\n" \
    "\t\t$ ${cyan}lnrun --docs program=google-chrome${reset}\n\n" \
    "\tOpen user documentation on firefox:\n" \
    "\t\t$ ${cyan}lnrun --docs program=firefox${reset}"
}

function run_test() {
  [[ ${NOMP_TEST_GROUPS} == *"*"* ]] &&
    TESTS="${NOMP_TEST_DIR}/nomp-${NOMP_TEST_GROUPS}[^.py]" ||
    TESTS="${NOMP_TEST_DIR}/nomp-${NOMP_TEST_GROUPS}"

  if ! compgen -G "${TESTS}" >/dev/null; then
    echo -e "\n${red}No tests found for: ${TESTS}${reset}"
    exit 1
  fi

  echo -e "Running tests..."
  num_errors=0
  cd "${NOMP_TEST_DIR}" &&
  for t in $(ls  ${TESTS}); do
    echo " $t --nomp-backend ${NOMP_BACKEND} --nomp-device ${NOMP_DEVICE} \
      --nomp-platform ${NOMP_PLATFORM} --nomp-install-dir ${NOMP_INSTALL_DIR} \
      --nomp-verbose ${NOMP_VERBOSE} \
      --nomp-annotations-script ${NOMP_ANNOTATIONS_SCRIPT}"

    $t --nomp-backend ${NOMP_BACKEND} --nomp-device ${NOMP_DEVICE} \
      --nomp-platform ${NOMP_PLATFORM} --nomp-install-dir ${NOMP_INSTALL_DIR} \
      --nomp-verbose ${NOMP_VERBOSE} \
      --nomp-annotations-script ${NOMP_ANNOTATIONS_SCRIPT}

    if [ $? -eq 0 ]; then
      echo "${t}: ${green}Passed${reset}"
    else
      echo "${t}: ${red}Failed${reset}"
      num_errors=$((num_errors + 1))
    fi
  done
  if [ $num_errors -gt 0 ]; then
    echo -e "\n${red}There are ${num_errors} test failures${reset}.\n"
  fi
  cd -
  exit ${num_errors}
}

function run_debug() {
  TEST_NAME="nomp-${DEBUG_TEST}"
  BUILD_TEST="${NOMP_TEST_DIR}/${TEST_NAME}"
  if [[ -f "$BUILD_TEST" ]]; then
    echo -e "\nDebugging session started for: ${cyan}${TEST_NAME}${reset}"
    cd "${NOMP_TEST_DIR}" &&
      gdbserver "localhost:${NOMP_PORT}" "${BUILD_TEST}" \
        --nomp-backend ${NOMP_BACKEND} --nomp-device ${NOMP_DEVICE} \
        --nomp-platform ${NOMP_PLATFORM} \
        --nomp-install-dir ${NOMP_INSTALL_DIR} --nomp-verbose ${NOMP_VERBOSE}
    cd -
    echo "Debugging session ended"
  else
    echo -e "\n${red}Test not found: nomp-${DEBUG_TEST}${reset}"
    exit 1
  fi
}

function run_docs() {
  ${NOMP_PROGRAM} ${NOMP_INSTALL_DIR}/docs/index.html
}

if [ $# -eq 0 ]; then
  echo "No arguments were provided to ${cyan}lnrun${reset} script."
  exit 0
fi

# Parse the command line arguments.
while [ $# -gt 0 ]; do
  case $1 in
  --help)
    shift
    case $1 in
     test) print_help_test ;;
    debug) print_help_debug ;;
     docs) print_help_docs ;;
        *) print_help_main ;;
    esac
    shift
    exit 0
    ;;
  --test)
    shift
    while [ $# -gt 0 ]; do
      case $1 in
       backend=*) NOMP_BACKEND="${1#*=}" && shift ;;
      platform=*) NOMP_PLATFORM="${1#*=}" && shift ;;
        device=*) NOMP_DEVICE="${1#*=}" && shift ;;
       verbose=*) NOMP_VERBOSE="${1#*=}" && shift ;;
         group=*) NOMP_TEST_GROUPS="${1#*=}" && shift ;;
               *) print_lnrun_error_and_exit $1 "test" ;;
      esac
    done
    run_test
    exit 0
    ;;
  --debug)
    shift
    DEBUG_TEST="${1}"
    shift
    while [ $# -gt 0 ]; do
      case $1 in
       backend=*) NOMP_BACKEND="${1#*=}" && shift ;;
      platform=*) NOMP_PLATFORM="${1#*=}" && shift ;;
        device=*) NOMP_DEVICE="${1#*=}" && shift ;;
       verbose=*) NOMP_VERBOSE="${1#*=}" && shift ;;
          port=*) NOMP_PORT="${1#*=}" && shift ;;
               *) print_lnrun_error_and_exit $1 "debug" ;;
      esac
    done
    run_debug
    exit 0
    ;;
  --docs)
    shift
    while [ $# -gt 0 ]; do
      case $1 in
      program=*) NOMP_PROGRAM="${1#*=}" && shift ;;
              *) print_lnrun_error_and_exit $1 "docs" ;;
      esac
    done
    run_docs
    exit 0
    ;;

  *) print_lnrun_error_and_exit $1 "" ;;
  esac
  shift
done

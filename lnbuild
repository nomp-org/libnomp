#!/bin/bash

# Script variables.
: "${NOMP_SOURCE_DIR:="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
: "${NOMP_SHELL_CONFIG_FILE:="${HOME}/.bashrc"}"

# Terminal output colors.
red=$(tput setaf 1)
green=$(tput setaf 2)
cyan=$(tput setaf 6)
reset=$(tput sgr0)

# Read state variables created by lncfg.
NOMP_LNSTATE_PATH="${NOMP_SOURCE_DIR}/.lnstate"
if [[ -f "${NOMP_LNSTATE_PATH}" ]]; then
  source "${NOMP_LNSTATE_PATH}"
else
  echo "${red}You should run ./lncfg before running ${0}${reset}."
  exit 1
fi
if [[ -z "${NOMP_INSTALL_DIR}" ]]; then
  echo "${red}NOMP_INSTALL_DIR is not set in .lnstate file${reset}."
  exit 1
fi

# Create commands which goes in shell configuration.
NOMP_ENVIRONMENT=$(cat <<-END
# Setup nomp environment variables.
export NOMP_INSTALL_DIR=${NOMP_INSTALL_DIR}
# Add lnrun script to path.
export PATH=${NOMP_INSTALL_DIR}/bin:\${PATH}
END
)

# Check if the specified shell configuration file exists. If not, look for
# common config files.
if [[ ! -f "${NOMP_SHELL_CONFIG_FILE}" ]]; then
  if [[ -f "${HOME}/.bashrc" ]]; then
    NOMP_SHELL_CONFIG_FILE="${HOME}/.bashrc"
  elif [[ -f "${HOME}/.zshrc" ]]; then
    NOMP_SHELL_CONFIG_FILE="${HOME}/.zshrc"
  else
    NOMP_SHELL_CONFIG_FILE=""
  fi
fi

function print_help() {
  echo -e "Usage: ${0} [options]\n" \
    "${cyan}--help         ${reset}\tPrint help for lnbuild script.\n" \
    "${cyan}--install      ${reset}\tInstall libnomp.\n" \
    "${cyan}--format       ${reset}\tFormat C code using clang-format.\n" \
    "${cyan}--format-check ${reset}\tCheck if C code is formatted correctly.\n" \
    "${cyan}--tidy-check   ${reset}\tRun clang-tidy to perform static" \
    "analysis on C source.\n" \
    "${cyan}--black        ${reset}\tFormat python code using black.\n" \
    "${cyan}--black-check  ${reset}\tCheck if python code is formatted" \
    "correctly.\n" \
    "${cyan}--isort        ${reset}\tRun isort to format python imports.\n" \
    "${cyan}--isort-check  ${reset}\tCheck if python imports are formatted" \
    "correctly.\n" \
    "${cyan}--flake8-check ${reset}\tRun flake8 tests on python source.\n" \
    "${cyan}--pylint-check ${reset}\tRun pylint to perform static analysis" \
    "on python source.\n" \
    "${cyan}--update-shell ${reset}\tUpdate shell configuration file."
}

# Read in command line arguments.
: ${NOMP_INSTALL:="no"}
: ${NOMP_FORMAT:="no"}
: ${NOMP_FORMAT_CHECK:="no"}
: ${NOMP_TIDY:="no"}
: ${NOMP_PYLINT:="no"}
: ${NOMP_BLACK:="no"}
: ${NOMP_BLACK_CHECK:="no"}
: ${NOMP_ISORT:="no"}
: ${NOMP_ISORT_CHECK:="no"}
: ${NOMP_FLAKE8:="no"}
: ${NOMP_PROMPT:="no"}

if [[ $# -eq 0 ]]; then
  print_help
  exit 1
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    --help)
      shift
      print_help
      exit 0
      ;;
    --install)
      NOMP_INSTALL="yes"
      shift
      ;;
    --format)
      NOMP_FORMAT="yes"
      shift
      ;;
    --format-check)
      NOMP_FORMAT_CHECK="yes"
      shift
      ;;
    --tidy-check)
      NOMP_TIDY="yes"
      shift
      ;;
    --black)
      NOMP_BLACK="yes"
      shift
      ;;
    --black-check)
      NOMP_BLACK_CHECK="yes"
      shift
      ;;
    --isort)
      NOMP_ISORT="yes"
      shift
      ;;
    --isort-check)
      NOMP_ISORT_CHECK="yes"
      shift
      ;;
    --flake8-check)
      NOMP_FLAKE8="yes"
      shift
      ;;
    --pylint-check)
      NOMP_PYLINT="yes"
      shift
      ;;
    --update-shell)
      NOMP_PROMPT="yes"
      shift
      ;;
    *) echo "${red}Invalid option: ${1}${reset}."
    echo "See ${cyan}${0} --help${reset} for the accepted options."
    exit 1 ;;
  esac
done

if [[ ${NOMP_FORMAT} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target format
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_FORMAT_CHECK} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target format-check
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_TIDY} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target tidy
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_BLACK} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target black
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_BLACK_CHECK} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target black-check
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_ISORT} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target isort
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_ISORT_CHECK} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target isort-check
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_FLAKE8} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target flake8
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_PYLINT} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target pylint
  [[ $? -ne 0 ]] && exit 1
fi

if [[ ${NOMP_INSTALL} == "yes" ]]; then
  cmake --build "${NOMP_BUILD_DIR}" --target install
  [[ $? -ne 0 ]] && exit 1

  [[ "${NOMP_PROMPT}" != "yes" ]] && exit 0

  if [[ -f ${NOMP_SHELL_CONFIG_FILE} ]]; then
    echo -e "${NOMP_ENVIRONMENT}" >> "${NOMP_SHELL_CONFIG_FILE}"
    echo "${green}Successfully exported variables to ${NOMP_SHELL_CONFIG_FILE}${reset}."
    exit 0
  else
    echo "${red}Shell configration file ${NOMP_SHELL_CONFIG_FILE} doesn't exist{reset}."
    exit 1
  fi
fi

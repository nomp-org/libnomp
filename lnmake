#!/bin/bash

# script variables
NOMP_SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NOMP_DEFAULT_PROMPT=""
NOMP_LNSTATE_PATH="${NOMP_SOURCE_DIR}/.lnstate"
NOMP_SHELL_CONFIG_FILE=""

# colors
red=$(tput setaf 1)
green=$(tput setaf 2)
cyan=$(tput setaf 6)
reset=$(tput sgr0)

# read state variables of lncfg
if [[ -f "${NOMP_LNSTATE_PATH}" ]]; then
  source "${NOMP_LNSTATE_PATH}"
else
  echo "${red}You should run ./lncfg before running ./${0}${reset}"
  exit 1
fi
NOMP_BIN_PATH="${NOMP_INSTALL_DIR}/bin"

# check the shell config file
if [[ -f ~/.bashrc ]]; then
  NOMP_SHELL_CONFIG_FILE="${HOME}/.bashrc"
elif [[ -f ~/.zshrc ]]; then
  NOMP_SHELL_CONFIG_FILE="${HOME}/.zshrc"
fi

function update_bashrc() {
  [[ -n ${NOMP_SHELL_CONFIG_FILE} ]] &&
    echo -e "${NOMP_ENVIRONMENT}" >>"${NOMP_SHELL_CONFIG_FILE}" &&
    echo "${green}Successfully exported variables to" \
      "${NOMP_SHELL_CONFIG_FILE}${reset}."
  exit 0
}

function print_help() {
  echo -e " NAME\n\t Utility tools for installing and formatting libnomp.\n\n" \
    "INSTALL\n" \
    "\tlnmake i|install [--yes|--no]\n" \
    "\tInstall libnomp.\n\n" \
    "\t${cyan}-y${reset}, ${cyan}--yes${reset}" \
    "\tYes to all prompts.\n" \
    "\t${cyan}-n${reset}, ${cyan}--no${reset}" \
    "\tNo to all prompts.\n\n" \
    "FORMAT\n" \
    "\tlnmake f|format [--py] [--c]\n" \
    "\tFormat the source files of libnomp.\n\n" \
    "\t${cyan}--c${reset}\t" \
    "\tFormat c source files.\n" \
    "\t${cyan}--py${reset}\t" \
    "\tFormat python source files."
  exit 0
}

function install() {
  NOMP_INSTALL_SUCCESS=false
  cmake --build "${NOMP_BUILD_DIR}" --target install &&
    NOMP_INSTALL_SUCCESS=true

  if [[ ${NOMP_INSTALL_SUCCESS} = true ]]; then
    echo "${green}Successfully installed libnomp${reset}"
    echo "See ${cyan}lnrun -h${reset} or ${cyan}lnrun --help${reset} for " \
      "available commands."

    [[ ${NOMP_DEFAULT_PROMPT} = "n" ]] && exit 0

    # Add nomp install dir to env
    NOMP_ENVIRONMENT=$(
      cat <<-END
# Setup nomp environment variables
export NOMP_INSTALL_DIR=${NOMP_INSTALL_DIR}
# Add lnrun script to path
export PATH=${NOMP_BIN_PATH}:\${PATH}
END
    )

    # set the libnomp env variables if not
    [[ ${NOMP_DEFAULT_PROMPT} = "y" ]] && update_bashrc
    read -p "Do you wish to add libnomp variables to .bashrc? [Y|n]: " -n 1
    echo
    [[ $REPLY =~ ^[Yy]$ ]] && update_bashrc
    exit 0
  else
    echo "${red}Failed to install libnomp${reset}"
    exit 1
  fi
}

function format_python() {
  NOMP_FORMAT_SUCCESS=false
  cmake --build "${NOMP_BUILD_DIR}" --target pylint &&
    cmake --build "${NOMP_BUILD_DIR}" --target flake8 &&
    NOMP_FORMAT_SUCCESS=true

  if [[ ${NOMP_FORMAT_SUCCESS} = true ]]; then
    echo "${green}Successfully formatted python source files${reset}"
  else
    echo "${red}Failed to format python source files${reset}"
    exit 1
  fi
}

function format_c() {
  NOMP_FORMAT_SUCCESS=false
  cmake --build "${NOMP_BUILD_DIR}" --target clangformat &&
    NOMP_FORMAT_SUCCESS=true

  if [[ ${NOMP_FORMAT_SUCCESS} = true ]]; then
    echo "${green}Successfully formatted c-lang source files${reset}"
  else
    echo "${red}Failed to format c-lang source files${reset}"
    exit 1
  fi
}

if [ $# -eq 0 ]; then
  echo "No arguments were provided to ${cyan}lnmake${reset} script."
  exit 0
fi

# check for default prompt
if [[ $# -gt 0 ]]; then
  case $1 in
  i | install)
    # check for default prompt
    shift
    if [[ $# -gt 0 ]]; then
      case $1 in
      -h | --help) print_help ;;
      -y | --yes) NOMP_DEFAULT_PROMPT="y" ;;
      -n | --no) NOMP_DEFAULT_PROMPT="n" ;;
      *)
        echo "${red}Invalid argument: ${1}${reset}."
        echo "See ${cyan}./${0} -h|--help${reset} for the accepted commands."
        exit 1
        ;;
      esac
    fi
    install
    ;;
  f | format)
    shift
    if [ $# -eq 0 ]; then
      echo "No arguments were provided to ${cyan}lnmake f|format${reset}."
      exit 0
    fi
    while [ $# -gt 0 ]; do
      case $1 in
      --py) NOMP_FORMAT_PYTHON=true ;;
      --c) NOMP_FORMAT_C=true ;;
      *)
        echo "${red}Invalid argument: ${1}${reset}"
        echo "See ${cyan}${0} -h|--help f|format ${reset} for the accepted commands."
        exit 1
        ;;
      esac
      shift
    done
    [[ ${NOMP_FORMAT_PYTHON} = true ]] && format_python
    [[ ${NOMP_FORMAT_C} = true ]] && format_c
    exit 0
    ;;
  -h | --help) print_help ;;
  *)
    echo "${red}Invalid argument: ${1}${reset}."
    echo "See ${cyan}./${0} -h|--help${reset} for the accepted commands."
    exit 1
    ;;
  esac
fi
